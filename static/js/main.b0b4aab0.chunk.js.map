{"version":3,"sources":["Components/List.js","Components/AddTodo.js","Components/Clock.js","App.js","serviceWorker.js","index.js"],"names":["List","todos","doneTodo","deleteTodo","className","map","todo","key","id","onClick","data","AddTodo","handleChange","evt","setState","content","target","value","handleSubmit","preventDefault","props","addTodo","state","onSubmit","this","onChange","type","placeholder","Component","Clock","time","Date","toLocaleTimeString","undefined","hour12","setInterval","App","newTodo","length","classList","toggle","todoId","newList","filter","elmt","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sPAiBeA,G,MAfF,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,WAC/B,OACE,wBAAIC,UAAU,YACXH,EAAMI,KAAI,SAAAC,GACT,OACE,wBAAIC,IAAKD,EAAKE,GAAIC,QAASP,GACxBI,EAAKI,KACN,4BAAQD,QAAS,kBAAMN,EAAWG,EAAKE,KAAKJ,UAAU,UAAtD,YCsBGO,E,YA5Bb,aAAe,IAAD,8BACZ,+CAMFC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZC,QAASF,EAAIG,OAAOC,SATV,EAadC,aAAe,SAACL,GACdA,EAAIM,iBACJ,EAAKC,MAAMC,QAAQ,EAAKC,MAAMP,SAC9B,EAAKD,SAAS,CAACC,QAAS,MAdxB,EAAKO,MAAQ,CACXP,QAAS,IAHC,E,sEAoBZ,OACE,0BAAMQ,SAAUC,KAAKN,aAAcd,UAAU,YAC3C,2BAAOqB,SAAUD,KAAKZ,aAAcc,KAAK,OAAOC,YAAY,MAAMV,MAAOO,KAAKF,MAAMP,e,GAvBtEa,aCuBPC,E,YAtBb,aAAe,IAAD,8BACZ,+CACKP,MAAQ,CACXQ,MAAM,IAAIC,MAAOC,wBAAmBC,EAAW,CAACC,QAAQ,KAH9C,E,iFAOO,IAAD,OAClBC,aAAa,WACX,EAAKrB,SAAS,CACZgB,MAAM,IAAIC,MAAOC,wBAAmBC,EAAW,CAACC,QAAQ,QAEzD,O,+BAIH,OACE,yBAAK9B,UAAU,QAAQoB,KAAKF,MAAMQ,U,GAlBpBF,aCyDLQ,E,YApDb,aAAe,IAAD,8BACZ,+CAmBFf,QAAU,SAACgB,GACT,IAAM/B,EAAO,GACbA,EAAKE,GAAK,EAAKc,MAAMrB,MAAMqC,OAAS,EACpChC,EAAKI,KAAO2B,EACZ,EAAKvB,SAAS,CACZb,MAAM,GAAD,mBAAM,EAAKqB,MAAMrB,OAAjB,CAAwBK,OAzBnB,EA6BdJ,SAAW,SAACW,GACVA,EAAIG,OAAOuB,UAAUC,OAAO,SA9BhB,EAiCdrC,WAAa,SAACsC,GACZ,IAAMC,EAAU,EAAKpB,MAAMrB,MAAM0C,QAAO,SAAAC,GACtC,OAAOA,EAAKpC,KAAOiC,KAErB,EAAK3B,SAAS,CAACb,MAAOyC,KAnCtB,EAAKpB,MAAQ,CACXrB,MAAO,CACL,CACEO,GAAI,EACJE,KAAM,gBAER,CACEF,GAAI,EACJE,KAAM,SAER,CACEF,GAAI,EACJE,KAAM,kBAdA,E,sEAyCZ,OACE,yBAAKN,UAAU,aACb,0CACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASiB,QAASG,KAAKH,UACvB,kBAAC,EAAD,CAAMpB,MAAOuB,KAAKF,MAAMrB,MAAOC,SAAUsB,KAAKtB,SAAUC,WAAYqB,KAAKrB,kB,GA/C/D0C,IAAMjB,WCMJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b0b4aab0.chunk.js","sourcesContent":["import React from 'react';\n\nconst List = ({ todos, doneTodo, deleteTodo }) => {\n  return (\n    <ul className=\"todoList\">\n      {todos.map(todo => {\n        return (\n          <li key={todo.id} onClick={doneTodo}>\n            {todo.data}\n            <button onClick={() => deleteTodo(todo.id)} className=\"delete\">x</button>\n          </li>\n        )\n      })}\n    </ul>\n    )\n}\n\nexport default List;","import React, { Component } from 'react';\n\nclass AddTodo extends Component {\n  constructor() {\n    super();\n    this.state = {\n      content: ''\n    }\n  }\n\n  handleChange = (evt) => {\n    this.setState({\n      content: evt.target.value\n    })\n  }\n\n  handleSubmit = (evt) => {\n    evt.preventDefault();\n    this.props.addTodo(this.state.content);\n    this.setState({content: ''});\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} className=\"add-todo\">\n        <input onChange={this.handleChange} type=\"text\" placeholder=\"add\" value={this.state.content} />\n      </form>\n    );\n  }\n}\n\nexport default AddTodo;","import React, { Component } from 'react';\n\nclass Clock extends Component {\n  constructor() {\n    super();\n    this.state = {\n      time: new Date().toLocaleTimeString(undefined, {hour12: false})\n    }\n  }\n\n  componentDidMount() {\n    setInterval( () => {\n      this.setState({\n        time: new Date().toLocaleTimeString(undefined, {hour12: false})\n      });\n    }, 1000);\n  }\n\n  render() {\n    return (\n      <div className=\"time\">{this.state.time}</div>\n    )\n  }\n}\n\nexport default Clock;","import React from 'react';\nimport './App.scss';\nimport List from './Components/List';\nimport AddTodo from './Components/AddTodo';\nimport Clock from './Components/Clock';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      todos: [\n        {\n          id: 1,\n          data: '吃飯'\n        },\n        {\n          id: 2,\n          data: 'Sleep'\n        },\n        {\n          id: 3,\n          data: '洗澡'\n        }\n      ]\n    }\n  }\n\n  addTodo = (newTodo) => {\n    const todo = {};\n    todo.id = this.state.todos.length + 1;\n    todo.data = newTodo;\n    this.setState({\n      todos: [...this.state.todos, todo]\n    });\n  }\n\n  doneTodo = (evt) => {\n    evt.target.classList.toggle('done');\n  }\n\n  deleteTodo = (todoId) => {\n    const newList = this.state.todos.filter(elmt => {\n      return elmt.id !== todoId;\n    })\n    this.setState({todos: newList});\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>To-do List</h1>\n        <Clock />\n        <AddTodo addTodo={this.addTodo} />\n        <List todos={this.state.todos} doneTodo={this.doneTodo} deleteTodo={this.deleteTodo} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}